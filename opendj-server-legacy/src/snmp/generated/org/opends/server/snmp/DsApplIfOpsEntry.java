package org.opends.server.snmp;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIRECTORY-SERVER-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "DsApplIfOpsEntry" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.66.2.1.
 */
public class DsApplIfOpsEntry implements DsApplIfOpsEntryMBean, Serializable {

    /**
     * Variable for storing the value of "DsApplIfChainings".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.19".
     *
     * " Number of operations forwarded by this Directory Server
     * to other Directory Servers."
     *
     */
    protected Long DsApplIfChainings = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfReferrals".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.18".
     *
     * " Number of referrals returned in response
     * to requests for operations."
     *
     */
    protected Long DsApplIfReferrals = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfWholeSubtreeSearchOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.17".
     *
     * " Number of whole subtree search requests received."
     *
     */
    protected Long DsApplIfWholeSubtreeSearchOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfOneLevelSearchOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.16".
     *
     * " Number of oneLevel search requests received."
     *
     */
    protected Long DsApplIfOneLevelSearchOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfSearchOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.15".
     *
     * " Number of search requests- baseObject searches,
     * oneLevel searches and  whole subtree searches,
     * received."
     *
     */
    protected Long DsApplIfSearchOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfListOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.14".
     *
     * " Number of list requests received."
     *
     */
    protected Long DsApplIfListOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfModifyRDNOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.13".
     *
     * " Number of modifyRDN requests received."
     *
     */
    protected Long DsApplIfModifyRDNOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfModifyEntryOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.12".
     *
     * " Number of modifyEntry requests received."
     *
     */
    protected Long DsApplIfModifyEntryOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfRemoveEntryOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.11".
     *
     * " Number of removeEntry requests received."
     *
     */
    protected Long DsApplIfRemoveEntryOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfAddEntryOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.10".
     *
     * " Number of addEntry requests received."
     *
     */
    protected Long DsApplIfAddEntryOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfCompareOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.9".
     *
     * " Number of compare requests received."
     *
     */
    protected Long DsApplIfCompareOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfReadOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.8".
     *
     * " Number of read requests  received."
     *
     */
    protected Long DsApplIfReadOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfInOps".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.7".
     *
     * " Number of requests received from DUAs or other
     * Directory Servers."
     *
     */
    protected Long DsApplIfInOps = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfBindSecurityErrors".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.6".
     *
     * " Number of bind requests that have been rejected
     * due to inappropriate authentication or
     * 
     * invalid credentials."
     *
     */
    protected Long DsApplIfBindSecurityErrors = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfStrongAuthBinds".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.5".
     *
     * " Number of bind requests that were authenticated
     * using TLS and X.500 strong authentication procedures.
     * This includes the binds that were
     * authenticated using external authentication procedures."
     *
     */
    protected Long DsApplIfStrongAuthBinds = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfOutBytes".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.25".
     *
     * " Outgoing traffic in bytes on the interface.
     * This will include responses to DUAs and Directory
     * Servers as well as requests to other Directory Servers."
     *
     */
    protected Long DsApplIfOutBytes = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfSimpleAuthBinds".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.4".
     *
     * " Number of bind requests that were authenticated
     * using simple authentication procedures like password
     * checks. This includes the
     * password authentication using SASL mechanisms like
     * CRAM-MD5."
     *
     */
    protected Long DsApplIfSimpleAuthBinds = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfUnauthBinds".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.3".
     *
     * " Number of unauthenticated/anonymous bind requests
     * received."
     *
     */
    protected Long DsApplIfUnauthBinds = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfInBytes".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.24".
     *
     * " Incoming traffic, in bytes, on the interface.
     * This will include requests from DUAs as well
     * as responses from other Directory Servers."
     *
     */
    protected Long DsApplIfInBytes = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfProtocol".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.2".
     *
     * "An identification of the protocol being used by the application
     * on this interface.  For an OSI Application, this will be the
     * Application Context.  For Internet applications, the IANA
     * maintains a registry[22] of the OIDs which correspond to
     * 
     * well-known applications.  If the application protocol is
     * not listed in the registry, an OID value of the form
     * {applTCPProtoID port} or {applUDProtoID port} are used for
     * TCP-based and UDP-based protocols, respectively. In either
     * case 'port' corresponds to the primary port number being
     * used by the protocol. The OIDs applTCPProtoID and
     * applUDPProtoID are defined in NETWORK-SERVICES-MIB"
     *
     */
    protected String DsApplIfProtocol = new String("1.3.6.1.4.1.42");

    /**
     * Variable for storing the value of "DsApplIfReplicationUpdatesOut".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.23".
     *
     * " Number of replication updates sent to or taken by
     * consumer Directory Servers."
     *
     */
    protected Long DsApplIfReplicationUpdatesOut = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfProtocolIndex".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.1".
     *
     * "An index to uniquely identify an entry corresponding to a
     * application-layer protocol interface. This index is used
     * for lexicographic ordering of the table."
     *
     */
    protected Integer DsApplIfProtocolIndex = new Integer(1);

    /**
     * Variable for storing the value of "DsApplIfReplicationUpdatesIn".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.22".
     *
     * " Number of replication updates fetched or received from
     * supplier Directory Servers."
     *
     */
    protected Long DsApplIfReplicationUpdatesIn = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfErrors".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.21".
     *
     * " Number of requests that could not be serviced
     * due to errors other than security errors, and
     * referrals.
     * A partially serviced operation will not be counted
     * as an error.
     * The errors include naming-related, update-related,
     * attribute-related and service-related errors."
     *
     */
    protected Long DsApplIfErrors = new Long(1);

    /**
     * Variable for storing the value of "DsApplIfSecurityErrors".
     * The variable is identified by: "1.3.6.1.2.1.66.2.1.20".
     *
     * " Number of requests received
     * which did not meet the security requirements. "
     *
     */
    protected Long DsApplIfSecurityErrors = new Long(1);

    /**
     * Variable for storing the value of "ApplIndex".
     * The variable is identified by: "1.3.6.1.2.1.27.1.1.1".
     *
     * "An index to uniquely identify the network service
     * application. This attribute is the index used for
     * lexicographic ordering of the table."
     *
     */
    protected Integer ApplIndex = new Integer(1);


    /**
     * Constructor for the "DsApplIfOpsEntry" group.
     */
    public DsApplIfOpsEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "DsApplIfChainings" variable.
     */
    public Long getDsApplIfChainings() throws SnmpStatusException {
        return DsApplIfChainings;
    }

    /**
     * Getter for the "DsApplIfReferrals" variable.
     */
    public Long getDsApplIfReferrals() throws SnmpStatusException {
        return DsApplIfReferrals;
    }

    /**
     * Getter for the "DsApplIfWholeSubtreeSearchOps" variable.
     */
    public Long getDsApplIfWholeSubtreeSearchOps() throws SnmpStatusException {
        return DsApplIfWholeSubtreeSearchOps;
    }

    /**
     * Getter for the "DsApplIfOneLevelSearchOps" variable.
     */
    public Long getDsApplIfOneLevelSearchOps() throws SnmpStatusException {
        return DsApplIfOneLevelSearchOps;
    }

    /**
     * Getter for the "DsApplIfSearchOps" variable.
     */
    public Long getDsApplIfSearchOps() throws SnmpStatusException {
        return DsApplIfSearchOps;
    }

    /**
     * Getter for the "DsApplIfListOps" variable.
     */
    public Long getDsApplIfListOps() throws SnmpStatusException {
        return DsApplIfListOps;
    }

    /**
     * Getter for the "DsApplIfModifyRDNOps" variable.
     */
    public Long getDsApplIfModifyRDNOps() throws SnmpStatusException {
        return DsApplIfModifyRDNOps;
    }

    /**
     * Getter for the "DsApplIfModifyEntryOps" variable.
     */
    public Long getDsApplIfModifyEntryOps() throws SnmpStatusException {
        return DsApplIfModifyEntryOps;
    }

    /**
     * Getter for the "DsApplIfRemoveEntryOps" variable.
     */
    public Long getDsApplIfRemoveEntryOps() throws SnmpStatusException {
        return DsApplIfRemoveEntryOps;
    }

    /**
     * Getter for the "DsApplIfAddEntryOps" variable.
     */
    public Long getDsApplIfAddEntryOps() throws SnmpStatusException {
        return DsApplIfAddEntryOps;
    }

    /**
     * Getter for the "DsApplIfCompareOps" variable.
     */
    public Long getDsApplIfCompareOps() throws SnmpStatusException {
        return DsApplIfCompareOps;
    }

    /**
     * Getter for the "DsApplIfReadOps" variable.
     */
    public Long getDsApplIfReadOps() throws SnmpStatusException {
        return DsApplIfReadOps;
    }

    /**
     * Getter for the "DsApplIfInOps" variable.
     */
    public Long getDsApplIfInOps() throws SnmpStatusException {
        return DsApplIfInOps;
    }

    /**
     * Getter for the "DsApplIfBindSecurityErrors" variable.
     */
    public Long getDsApplIfBindSecurityErrors() throws SnmpStatusException {
        return DsApplIfBindSecurityErrors;
    }

    /**
     * Getter for the "DsApplIfStrongAuthBinds" variable.
     */
    public Long getDsApplIfStrongAuthBinds() throws SnmpStatusException {
        return DsApplIfStrongAuthBinds;
    }

    /**
     * Getter for the "DsApplIfOutBytes" variable.
     */
    public Long getDsApplIfOutBytes() throws SnmpStatusException {
        return DsApplIfOutBytes;
    }

    /**
     * Getter for the "DsApplIfSimpleAuthBinds" variable.
     */
    public Long getDsApplIfSimpleAuthBinds() throws SnmpStatusException {
        return DsApplIfSimpleAuthBinds;
    }

    /**
     * Getter for the "DsApplIfUnauthBinds" variable.
     */
    public Long getDsApplIfUnauthBinds() throws SnmpStatusException {
        return DsApplIfUnauthBinds;
    }

    /**
     * Getter for the "DsApplIfInBytes" variable.
     */
    public Long getDsApplIfInBytes() throws SnmpStatusException {
        return DsApplIfInBytes;
    }

    /**
     * Getter for the "DsApplIfProtocol" variable.
     */
    public String getDsApplIfProtocol() throws SnmpStatusException {
        return DsApplIfProtocol;
    }

    /**
     * Getter for the "DsApplIfReplicationUpdatesOut" variable.
     */
    public Long getDsApplIfReplicationUpdatesOut() throws SnmpStatusException {
        return DsApplIfReplicationUpdatesOut;
    }

    /**
     * Getter for the "DsApplIfProtocolIndex" variable.
     */
    public Integer getDsApplIfProtocolIndex() throws SnmpStatusException {
        return DsApplIfProtocolIndex;
    }

    /**
     * Getter for the "DsApplIfReplicationUpdatesIn" variable.
     */
    public Long getDsApplIfReplicationUpdatesIn() throws SnmpStatusException {
        return DsApplIfReplicationUpdatesIn;
    }

    /**
     * Getter for the "DsApplIfErrors" variable.
     */
    public Long getDsApplIfErrors() throws SnmpStatusException {
        return DsApplIfErrors;
    }

    /**
     * Getter for the "DsApplIfSecurityErrors" variable.
     */
    public Long getDsApplIfSecurityErrors() throws SnmpStatusException {
        return DsApplIfSecurityErrors;
    }

    /**
     * Getter for the "ApplIndex" variable.
     */
    public Integer getApplIndex() throws SnmpStatusException {
        return ApplIndex;
    }

}
