/*
 * The contents of this file are subject to the terms of the Common Development and
 * Distribution License (the License). You may not use this file except in compliance with the
 * License.
 *
 * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
 * specific language governing permission and limitations under the License.
 *
 * When distributing Covered Software, include this CDDL Header Notice in each file and include
 * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
 * Header, with the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions Copyright [year] [name of copyright owner]".
 *
 * Copyright 2008 Sun Microsystems, Inc.
 */
package org.forgerock.opendj.server.config.client;



import java.util.Collection;
import java.util.SortedSet;
import org.forgerock.opendj.config.ManagedObjectDefinition;
import org.forgerock.opendj.config.PropertyException;
import org.forgerock.opendj.ldap.schema.AttributeType;
import org.forgerock.opendj.server.config.server.SMTPAccountStatusNotificationHandlerCfg;



/**
 * A client-side interface for reading and modifying SMTP Account
 * Status Notification Handler settings.
 * <p>
 * The SMTP Account Status Notification Handler is a notification
 * handler that sends email messages to end users and/or administrators
 * whenever an account status notification is generated.
 */
public interface SMTPAccountStatusNotificationHandlerCfgClient extends AccountStatusNotificationHandlerCfgClient {

  /**
   * Get the configuration definition associated with this SMTP Account Status Notification Handler.
   *
   * @return Returns the configuration definition associated with this SMTP Account Status Notification Handler.
   */
  ManagedObjectDefinition<? extends SMTPAccountStatusNotificationHandlerCfgClient, ? extends SMTPAccountStatusNotificationHandlerCfg> definition();



  /**
   * Gets the "email-address-attribute-type" property.
   * <p>
   * Specifies which attribute in the user's entries may be used to
   * obtain the email address when notifying the end user.
   * <p>
   * You can specify more than one email address as separate values.
   * In this case, the OpenDJ server sends a notification to all email
   * addresses identified.
   *
   * @return Returns the values of the "email-address-attribute-type" property.
   */
  SortedSet<AttributeType> getEmailAddressAttributeType();



  /**
   * Sets the "email-address-attribute-type" property.
   * <p>
   * Specifies which attribute in the user's entries may be used to
   * obtain the email address when notifying the end user.
   * <p>
   * You can specify more than one email address as separate values.
   * In this case, the OpenDJ server sends a notification to all email
   * addresses identified.
   *
   * @param values The values of the "email-address-attribute-type" property.
   * @throws PropertyException
   *           If one or more of the new values are invalid.
   */
  void setEmailAddressAttributeType(Collection<AttributeType> values) throws PropertyException;



  /**
   * Gets the "java-class" property.
   * <p>
   * Specifies the fully-qualified name of the Java class that
   * provides the SMTP Account Status Notification Handler
   * implementation.
   *
   * @return Returns the value of the "java-class" property.
   */
  String getJavaClass();



  /**
   * Sets the "java-class" property.
   * <p>
   * Specifies the fully-qualified name of the Java class that
   * provides the SMTP Account Status Notification Handler
   * implementation.
   *
   * @param value The value of the "java-class" property.
   * @throws PropertyException
   *           If the new value is invalid.
   */
  void setJavaClass(String value) throws PropertyException;



  /**
   * Gets the "message-subject" property.
   * <p>
   * Specifies the subject that should be used for email messages
   * generated by this account status notification handler.
   * <p>
   * The values for this property should begin with the name of an
   * account status notification type followed by a colon and the
   * subject that should be used for the associated notification
   * message. If an email message is generated for an account status
   * notification type for which no subject is defined, then that
   * message is given a generic subject.
   *
   * @return Returns the values of the "message-subject" property.
   */
  SortedSet<String> getMessageSubject();



  /**
   * Sets the "message-subject" property.
   * <p>
   * Specifies the subject that should be used for email messages
   * generated by this account status notification handler.
   * <p>
   * The values for this property should begin with the name of an
   * account status notification type followed by a colon and the
   * subject that should be used for the associated notification
   * message. If an email message is generated for an account status
   * notification type for which no subject is defined, then that
   * message is given a generic subject.
   *
   * @param values The values of the "message-subject" property.
   * @throws PropertyException
   *           If one or more of the new values are invalid.
   */
  void setMessageSubject(Collection<String> values) throws PropertyException;



  /**
   * Gets the "message-template-file" property.
   * <p>
   * Specifies the path to the file containing the message template to
   * generate the email notification messages.
   * <p>
   * The values for this property should begin with the name of an
   * account status notification type followed by a colon and the path
   * to the template file that should be used for that notification
   * type. If an account status notification has a notification type
   * that is not associated with a message template file, then no email
   * message is generated for that notification.
   *
   * @return Returns the values of the "message-template-file" property.
   */
  SortedSet<String> getMessageTemplateFile();



  /**
   * Sets the "message-template-file" property.
   * <p>
   * Specifies the path to the file containing the message template to
   * generate the email notification messages.
   * <p>
   * The values for this property should begin with the name of an
   * account status notification type followed by a colon and the path
   * to the template file that should be used for that notification
   * type. If an account status notification has a notification type
   * that is not associated with a message template file, then no email
   * message is generated for that notification.
   *
   * @param values The values of the "message-template-file" property.
   * @throws PropertyException
   *           If one or more of the new values are invalid.
   */
  void setMessageTemplateFile(Collection<String> values) throws PropertyException;



  /**
   * Gets the "recipient-address" property.
   * <p>
   * Specifies an email address to which notification messages are
   * sent, either instead of or in addition to the end user for whom
   * the notification has been generated.
   * <p>
   * This may be used to ensure that server administrators also
   * receive a copy of any notification messages that are generated.
   *
   * @return Returns the values of the "recipient-address" property.
   */
  SortedSet<String> getRecipientAddress();



  /**
   * Sets the "recipient-address" property.
   * <p>
   * Specifies an email address to which notification messages are
   * sent, either instead of or in addition to the end user for whom
   * the notification has been generated.
   * <p>
   * This may be used to ensure that server administrators also
   * receive a copy of any notification messages that are generated.
   *
   * @param values The values of the "recipient-address" property.
   * @throws PropertyException
   *           If one or more of the new values are invalid.
   */
  void setRecipientAddress(Collection<String> values) throws PropertyException;



  /**
   * Gets the "send-email-as-html" property.
   * <p>
   * Indicates whether an email notification message should be sent as
   * HTML.
   * <p>
   * If this value is true, email notification messages are marked as
   * text/html. Otherwise outgoing email messages are assumed to be
   * plaintext and marked as text/plain.
   *
   * @return Returns the value of the "send-email-as-html" property.
   */
  boolean isSendEmailAsHtml();



  /**
   * Sets the "send-email-as-html" property.
   * <p>
   * Indicates whether an email notification message should be sent as
   * HTML.
   * <p>
   * If this value is true, email notification messages are marked as
   * text/html. Otherwise outgoing email messages are assumed to be
   * plaintext and marked as text/plain.
   *
   * @param value The value of the "send-email-as-html" property.
   * @throws PropertyException
   *           If the new value is invalid.
   */
  void setSendEmailAsHtml(Boolean value) throws PropertyException;



  /**
   * Gets the "sender-address" property.
   * <p>
   * Specifies the email address from which the message is sent. Note
   * that this does not necessarily have to be a legitimate email
   * address.
   *
   * @return Returns the value of the "sender-address" property.
   */
  String getSenderAddress();



  /**
   * Sets the "sender-address" property.
   * <p>
   * Specifies the email address from which the message is sent. Note
   * that this does not necessarily have to be a legitimate email
   * address.
   *
   * @param value The value of the "sender-address" property.
   * @throws PropertyException
   *           If the new value is invalid.
   */
  void setSenderAddress(String value) throws PropertyException;



  /**
   * Gets the "send-message-without-end-user-address" property.
   * <p>
   * Indicates whether an email notification message should be
   * generated and sent to the set of notification recipients even if
   * the user entry does not contain any values for any of the email
   * address attributes (that is, in cases when it is not be possible
   * to notify the end user).
   * <p>
   * This is only applicable if both one or more email address
   * attribute types and one or more additional recipient addresses are
   * specified.
   *
   * @return Returns the value of the "send-message-without-end-user-address" property.
   */
  boolean isSendMessageWithoutEndUserAddress();



  /**
   * Sets the "send-message-without-end-user-address" property.
   * <p>
   * Indicates whether an email notification message should be
   * generated and sent to the set of notification recipients even if
   * the user entry does not contain any values for any of the email
   * address attributes (that is, in cases when it is not be possible
   * to notify the end user).
   * <p>
   * This is only applicable if both one or more email address
   * attribute types and one or more additional recipient addresses are
   * specified.
   *
   * @param value The value of the "send-message-without-end-user-address" property.
   * @throws PropertyException
   *           If the new value is invalid.
   */
  void setSendMessageWithoutEndUserAddress(boolean value) throws PropertyException;

}
