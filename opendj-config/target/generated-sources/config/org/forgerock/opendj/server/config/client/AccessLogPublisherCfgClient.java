/*
 * The contents of this file are subject to the terms of the Common Development and
 * Distribution License (the License). You may not use this file except in compliance with the
 * License.
 *
 * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
 * specific language governing permission and limitations under the License.
 *
 * When distributing Covered Software, include this CDDL Header Notice in each file and include
 * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
 * Header, with the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions Copyright [year] [name of copyright owner]".
 *
 * Copyright 2008 Sun Microsystems, Inc.
 */
package org.forgerock.opendj.server.config.client;



import java.util.Collection;
import org.forgerock.opendj.config.client.ConcurrentModificationException;
import org.forgerock.opendj.config.client.IllegalManagedObjectNameException;
import org.forgerock.opendj.config.client.ManagedObjectDecodingException;
import org.forgerock.opendj.config.client.OperationRejectedException;
import org.forgerock.opendj.config.DefinitionDecodingException;
import org.forgerock.opendj.config.ManagedObjectDefinition;
import org.forgerock.opendj.config.ManagedObjectNotFoundException;
import org.forgerock.opendj.config.PropertyException;
import org.forgerock.opendj.ldap.LdapException;
import org.forgerock.opendj.server.config.meta.AccessLogPublisherCfgDefn.FilteringPolicy;
import org.forgerock.opendj.server.config.server.AccessLogFilteringCriteriaCfg;
import org.forgerock.opendj.server.config.server.AccessLogPublisherCfg;



/**
 * A client-side interface for reading and modifying Access Log
 * Publisher settings.
 * <p>
 * Access Log Publishers are responsible for distributing access log
 * messages from the access logger to a destination.
 */
public interface AccessLogPublisherCfgClient extends LogPublisherCfgClient {

  /**
   * Get the configuration definition associated with this Access Log Publisher.
   *
   * @return Returns the configuration definition associated with this Access Log Publisher.
   */
  ManagedObjectDefinition<? extends AccessLogPublisherCfgClient, ? extends AccessLogPublisherCfg> definition();



  /**
   * Gets the "filtering-policy" property.
   * <p>
   * Specifies how filtering criteria should be applied to log
   * records.
   *
   * @return Returns the value of the "filtering-policy" property.
   */
  FilteringPolicy getFilteringPolicy();



  /**
   * Sets the "filtering-policy" property.
   * <p>
   * Specifies how filtering criteria should be applied to log
   * records.
   *
   * @param value The value of the "filtering-policy" property.
   * @throws PropertyException
   *           If the new value is invalid.
   */
  void setFilteringPolicy(FilteringPolicy value) throws PropertyException;



  /**
   * Gets the "java-class" property.
   * <p>
   * The fully-qualified name of the Java class that provides the
   * Access Log Publisher implementation.
   *
   * @return Returns the value of the "java-class" property.
   */
  String getJavaClass();



  /**
   * Sets the "java-class" property.
   * <p>
   * The fully-qualified name of the Java class that provides the
   * Access Log Publisher implementation.
   *
   * @param value The value of the "java-class" property.
   * @throws PropertyException
   *           If the new value is invalid.
   */
  void setJavaClass(String value) throws PropertyException;



  /**
   * Gets the "suppress-internal-operations" property.
   * <p>
   * Indicates whether internal operations (for example, operations
   * that are initiated by plugins) should be logged along with the
   * operations that are requested by users.
   *
   * @return Returns the value of the "suppress-internal-operations" property.
   */
  boolean isSuppressInternalOperations();



  /**
   * Sets the "suppress-internal-operations" property.
   * <p>
   * Indicates whether internal operations (for example, operations
   * that are initiated by plugins) should be logged along with the
   * operations that are requested by users.
   *
   * @param value The value of the "suppress-internal-operations" property.
   * @throws PropertyException
   *           If the new value is invalid.
   */
  void setSuppressInternalOperations(Boolean value) throws PropertyException;



  /**
   * Gets the "suppress-synchronization-operations" property.
   * <p>
   * Indicates whether access messages that are generated by
   * synchronization operations should be suppressed.
   *
   * @return Returns the value of the "suppress-synchronization-operations" property.
   */
  boolean isSuppressSynchronizationOperations();



  /**
   * Sets the "suppress-synchronization-operations" property.
   * <p>
   * Indicates whether access messages that are generated by
   * synchronization operations should be suppressed.
   *
   * @param value The value of the "suppress-synchronization-operations" property.
   * @throws PropertyException
   *           If the new value is invalid.
   */
  void setSuppressSynchronizationOperations(Boolean value) throws PropertyException;



  /**
   * Lists the Access Log Filtering Criteria.
   *
   * @return Returns an array containing the names of the Access Log
   *         Filtering Criteria.
   * @throws ConcurrentModificationException
   *           If this Access Log Publisher has been removed from the
   *           server by another client.
   * @throws LdapException
   *           If any other error occurs.
   */
  String[] listAccessLogFilteringCriteria() throws ConcurrentModificationException,
      LdapException;



  /**
   * Gets the named Access Log Filtering Criteria.
   *
   * @param name
   *           The name of the Access Log Filtering Criteria to
   *           retrieve.
   * @return Returns the named Access Log Filtering Criteria.
   * @throws DefinitionDecodingException
   *           If the named Access Log Filtering Criteria was found
   *           but its type could not be determined.
   * @throws ManagedObjectDecodingException
   *           If the named Access Log Filtering Criteria was found
   *           but one or more of its properties could not be decoded.
   * @throws ManagedObjectNotFoundException
   *           If the named Access Log Filtering Criteria was not
   *           found on the server.
   * @throws ConcurrentModificationException
   *           If this Access Log Publisher has been removed from the
   *           server by another client.
   * @throws LdapException
   *           If any other error occurs.
   */
  AccessLogFilteringCriteriaCfgClient getAccessLogFilteringCriteria(String name)
      throws DefinitionDecodingException, ManagedObjectDecodingException,
      ManagedObjectNotFoundException, ConcurrentModificationException,
      LdapException;



  /**
   * Creates a new Access Log Filtering Criteria. The new Access Log
   * Filtering Criteria will initially not contain any property values
   * (including mandatory properties). Once the Access Log Filtering
   * Criteria has been configured it can be added to the server using
   * the {@link #commit()} method.
   *
   * @param <C>
   *          The type of the Access Log Filtering Criteria being
   *          created.
   * @param d
   *          The definition of the Access Log Filtering Criteria to
   *          be created.
   * @param name
   *          The name of the new Access Log Filtering Criteria.
   * @param exceptions
   *          An optional collection in which to place any {@link
   *          PropertyException}s that occurred whilst attempting to
   *          determine the default values of the Access Log Filtering
   *          Criteria. This argument can be <code>null<code>.
   * @return Returns a new Access Log Filtering Criteria configuration
   *         instance.
   * @throws IllegalManagedObjectNameException
   *          If the name of the new Access Log Filtering Criteria is
   *          invalid.
   */
  <C extends AccessLogFilteringCriteriaCfgClient> C createAccessLogFilteringCriteria(
      ManagedObjectDefinition<C, ? extends AccessLogFilteringCriteriaCfg> d, String name, Collection<PropertyException> exceptions) throws IllegalManagedObjectNameException;



  /**
   * Removes the named Access Log Filtering Criteria.
   *
   * @param name
   *          The name of the Access Log Filtering Criteria to remove.
   * @throws ManagedObjectNotFoundException
   *           If the Access Log Filtering Criteria does not exist.
   * @throws OperationRejectedException
   *           If the server refuses to remove the Access Log
   *           Filtering Criteria due to some server-side constraint
   *           which cannot be satisfied (for example, if it is
   *           referenced by another managed object).
   * @throws ConcurrentModificationException
   *           If this Access Log Publisher has been removed from the
   *           server by another client.
   * @throws LdapException
   *           If any other error occurs.
   */
  void removeAccessLogFilteringCriteria(String name)
      throws ManagedObjectNotFoundException, OperationRejectedException,
      ConcurrentModificationException, LdapException;

}
