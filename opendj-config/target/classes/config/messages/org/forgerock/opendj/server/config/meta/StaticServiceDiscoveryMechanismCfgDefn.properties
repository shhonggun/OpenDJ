user-friendly-name=Static Service Discovery Mechanism
user-friendly-plural-name=Static Service Discovery Mechanisms
synopsis=A Static Service Discovery Mechanism returns a fixed list of LDAP directory servers.
description=A change in configuration to any of the specified directory servers must be manually applied on all Static Service Discovery Mechanisms that reference it.
property.discovery-interval.synopsis=Interval between two server configuration discovery executions.
property.discovery-interval.description=Specifies how frequently to read the configuration of the servers in order to discover their new information.
property.java-class.synopsis=Specifies the fully-qualified name of the Java class that provides the Static Service Discovery Mechanism implementation.
property.key-manager-provider.synopsis=Specifies the name of the key manager that should be used with this Static Service Discovery Mechanism.
property.key-manager-provider.requires-admin-action.synopsis=Changes to this property take effect immediately, but only for subsequent attempts to access the key manager provider for associated client connections.
property.key-manager-provider.syntax.aggregation.constraint-synopsis=The referenced key manager provider must be enabled when the Static Service Discovery Mechanism is enabled and configured to use SSL or StartTLS.
property.primary-server.synopsis=Specifies a list of servers that will be used in preference to secondary servers when available.
property.primary-server.syntax.string.pattern.synopsis=A host name followed by a ":" and a port number.
property.secondary-server.synopsis=Specifies a list of servers that will be used in place of primary servers when all primary servers are unavailable.
property.secondary-server.syntax.string.pattern.synopsis=A host name followed by a ":" and a port number.
property.ssl-cert-nickname.synopsis=Specifies the nicknames (also called the aliases) of the keys or key pairs that the Static Service Discovery Mechanism should use when performing SSL communication. The property can be used multiple times (referencing different nicknames) when server certificates with different public key algorithms are used in parallel (for example, RSA, DSA, and ECC-based algorithms). When a nickname refers to an asymmetric (public/private) key pair, the nickname for the public key certificate and associated private key entry must match exactly. A single nickname is used to retrieve both the public key and the private key.
property.ssl-cert-nickname.description=This is only applicable when the Static Service Discovery Mechanism is configured to use SSL.
property.ssl-cert-nickname.default-behavior.alias.synopsis=Let the server decide.
property.trust-manager-provider.synopsis=Specifies the name of the trust manager that should be used with the Static Service Discovery Mechanism.
property.trust-manager-provider.default-behavior.alias.synopsis=Use the trust manager provided by the JVM.
property.trust-manager-provider.requires-admin-action.synopsis=Changes to this property take effect immediately, but only for subsequent attempts to access the trust manager provider for associated client connections.
property.trust-manager-provider.syntax.aggregation.constraint-synopsis=The referenced trust manager provider must be enabled when the Static Service Discovery Mechanism is enabled and configured to use SSL or StartTLS.
property.use-ssl.synopsis=Indicates whether the Static Service Discovery Mechanism should use SSL.
property.use-ssl.description=If enabled, the Static Service Discovery Mechanism will use SSL to encrypt communication with the clients.
property.use-start-tls.synopsis=Indicates whether the Static Service Discovery Mechanism should use Start TLS.
property.use-start-tls.description=If enabled, the Static Service Discovery Mechanism will use Start TLS to encrypt communication with remote servers.
