<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.6 -->

<plugin>
  <name>ChaKanLDAP Maven Plugin</name>
  <description>Set of build tools for ChaKanLDAP project.</description>
  <groupId>org.openidentityplatform.opendj</groupId>
  <artifactId>opendj-maven-plugin</artifactId>
  <version>4.4.11</version>
  <goalPrefix>opendj</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>concat</goal>
      <description>Concatenates the contents of the files in the schema directory to create a
base schema that may be used during the upgrade process. Each element will
also include the X-SCHEMA-FILE extension to indicate the source schema file.
&lt;p&gt;
There is a single goal that generates the base schema.
&lt;p&gt;</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.forgerock.opendj.maven.ConcatSchemaMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>outputDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory path of the concatenated schema file to create. Must be in ${project.build.directory}</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The file name of the concatenated schema file to create.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project.</description>
        </parameter>
        <parameter>
          <name>schemaDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The path to the directory containing the schema files.</description>
        </parameter>
      </parameters>
      <configuration>
        <project implementation="org.apache.maven.project.MavenProject">${project}</project>
        <schemaDirectory implementation="java.lang.String" default-value="${basedir}/resource/schema"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>generate-config</goal>
      <description>Generate configuration classes from XML definition files for OpenDJ server.
&lt;p&gt;
There is a single goal that generate java sources, manifest files, I18N
messages and cli/ldap profiles. Resources will be looked for in the following
places depending on whether the plugin is executing for the core config or an
extension:
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;XSLT stylesheets&lt;/th&gt;
&lt;td&gt;Internal: /config/stylesheets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;XML core definitions&lt;/th&gt;
&lt;td&gt;Internal: /config/xml&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;XML extension definitions&lt;/th&gt;
&lt;td&gt;${basedir}/src/main/java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Generated Java APIs&lt;/th&gt;
&lt;td&gt;${project.build.directory}/generated-sources/config&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Generated I18N messages&lt;/th&gt;
&lt;td&gt;${project.build.outputDirectory}/config/messages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Generated profiles&lt;/th&gt;
&lt;td&gt;${project.build.outputDirectory}/config/profiles/${profile}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Generated manifest&lt;/th&gt;
&lt;td&gt;${project.build.outputDirectory}/META-INF/services/org.forgerock.opendj.
config.AbstractManagedObjectDefinition&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.forgerock.opendj.maven.GenerateConfigMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>isExtension</name>
          <type>java.lang.Boolean</type>
          <required>true</required>
          <editable>true</editable>
          <description>{@code true} if this plugin should be used to generate classes
for extended configuration (e.g OpenDJ plugins).
&lt;p&gt;
If not specified, OpenDJ configuration classes will be generated.</description>
        </parameter>
        <parameter>
          <name>packageName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Package name for which artifacts are generated.
&lt;p&gt;
This relative path is used to locate xml definition files and to locate
generated artifacts.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project.</description>
        </parameter>
      </parameters>
      <configuration>
        <isExtension implementation="java.lang.Boolean" default-value="false"/>
        <project implementation="org.apache.maven.project.MavenProject">${project}</project>
      </configuration>
    </mojo>
    <mojo>
      <goal>generate-manifest</goal>
      <description>Generate a class path suitable for the Class-Path header of a Manifest file,
allowing to filter on included jars, using excludes/includes properties.
&lt;p&gt;
There is a single goal that generates a property given by &apos;classPathProperty&apos;
parameter, with the generated classpath as the value.</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>validate</phase>
      <implementation>org.forgerock.opendj.maven.GenerateManifestClassPathMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalJars</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of additional JARs to include in the classpath. Each item must be of format &quot;file.jar&quot;.</description>
        </parameter>
        <parameter>
          <name>classPathProperty</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>A property to set to the content of the generated classpath string.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of artifacts to exclude from the classpath. Each item must be of format &quot;groupId:artifactId&quot;.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of artifacts to include in the classpath. Each item must be of format &quot;groupId:artifactId&quot;.</description>
        </parameter>
        <parameter>
          <name>productJarName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of product jar, e.g. &quot;OpenDJ&quot;.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project.</description>
        </parameter>
        <parameter>
          <name>supportedLocales</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of supported locales, separated by a &quot;,&quot;.
&lt;p&gt;
Example: &quot;fr,es,de&quot;</description>
        </parameter>
      </parameters>
      <configuration>
        <project implementation="org.apache.maven.project.MavenProject">${project}</project>
      </configuration>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.openidentityplatform.commons</groupId>
      <artifactId>util</artifactId>
      <type>jar</type>
      <version>2.0.12</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <type>jar</type>
      <version>1.7.30</version>
    </dependency>
    <dependency>
      <groupId>org.twdata.maven</groupId>
      <artifactId>mojo-executor</artifactId>
      <type>jar</type>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
      <type>jar</type>
      <version>3.0.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>3.0.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings-builder</artifactId>
      <type>jar</type>
      <version>3.0.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>3.0.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model-builder</artifactId>
      <type>jar</type>
      <version>3.0.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-aether-provider</artifactId>
      <type>jar</type>
      <version>3.0.5</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-spi</artifactId>
      <type>jar</type>
      <version>1.13.1</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-impl</artifactId>
      <type>jar</type>
      <version>1.13.1</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-api</artifactId>
      <type>jar</type>
      <version>1.13.1</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-util</artifactId>
      <type>jar</type>
      <version>1.13.1</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-plexus</artifactId>
      <type>jar</type>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-bean</artifactId>
      <type>jar</type>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-guice</artifactId>
      <type>jar</type>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-guava</artifactId>
      <type>jar</type>
      <version>0.9.9</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interpolation</artifactId>
      <type>jar</type>
      <version>1.14</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-classworlds</artifactId>
      <type>jar</type>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-component-annotations</artifactId>
      <type>jar</type>
      <version>1.5.5</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-sec-dispatcher</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-cipher</artifactId>
      <type>jar</type>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>3.0.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>3.0.5</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>2.1</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <type>jar</type>
      <version>1.7.30</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
  </dependencies>
</plugin>