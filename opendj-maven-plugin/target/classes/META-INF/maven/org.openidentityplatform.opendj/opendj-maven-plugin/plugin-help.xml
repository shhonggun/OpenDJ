<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.6 -->

<plugin>
  <name>ChaKanLDAP Maven Plugin</name>
  <description>Set of build tools for ChaKanLDAP project.</description>
  <groupId>org.openidentityplatform.opendj</groupId>
  <artifactId>opendj-maven-plugin</artifactId>
  <version>4.4.11</version>
  <goalPrefix>opendj</goalPrefix>
  <mojos>
    <mojo>
      <goal>concat</goal>
      <description>Concatenates the contents of the files in the schema directory to create a base schema that may be used during the upgrade process. Each element will also include the X-SCHEMA-FILE extension to indicate the source schema file.
There is a single goal that generates the base schema.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.forgerock.opendj.maven.ConcatSchemaMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>outputDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The directory path of the concatenated schema file to create. Must be in ${project.build.directory}</description>
        </parameter>
        <parameter>
          <name>outputFile</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The file name of the concatenated schema file to create.</description>
        </parameter>
        <parameter>
          <name>schemaDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The path to the directory containing the schema files.</description>
        </parameter>
      </parameters>
      <configuration>
        <schemaDirectory implementation="java.lang.String" default-value="${basedir}/resource/schema"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>generate-config</goal>
      <description>Generate configuration classes from XML definition files for OpenDJ server.
There is a single goal that generate java sources, manifest files, I18N messages and cli/ldap profiles. Resources will be looked for in the following places depending on whether the plugin is executing for the core config or an extension:

Location
XSLT stylesheets
Internal: /config/stylesheets
XML core definitions
Internal: /config/xml
XML extension definitions
${basedir}/src/main/java
Generated Java APIs
${project.build.directory}/generated-sources/config
Generated I18N messages
${project.build.outputDirectory}/config/messages
Generated profiles
${project.build.outputDirectory}/config/profiles/${profile}
Generated manifest
${project.build.outputDirectory}/META-INF/services/org.forgerock.opendj. config.AbstractManagedObjectDefinition</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>org.forgerock.opendj.maven.GenerateConfigMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>isExtension</name>
          <type>java.lang.Boolean</type>
          <required>true</required>
          <editable>true</editable>
          <description>true if this plugin should be used to generate classes for extended configuration (e.g OpenDJ plugins).
If not specified, OpenDJ configuration classes will be generated.
</description>
        </parameter>
        <parameter>
          <name>packageName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>Package name for which artifacts are generated.
This relative path is used to locate xml definition files and to locate generated artifacts.
</description>
        </parameter>
      </parameters>
      <configuration>
        <isExtension implementation="java.lang.Boolean" default-value="false"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>generate-manifest</goal>
      <description>Generate a class path suitable for the Class-Path header of a Manifest file, allowing to filter on included jars, using excludes/includes properties.
There is a single goal that generates a property given by &apos;classPathProperty&apos; parameter, with the generated classpath as the value.
</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>validate</phase>
      <implementation>org.forgerock.opendj.maven.GenerateManifestClassPathMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalJars</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of additional JARs to include in the classpath. Each item must be of format &apos;file.jar&apos;.</description>
        </parameter>
        <parameter>
          <name>classPathProperty</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>A property to set to the content of the generated classpath string.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of artifacts to exclude from the classpath. Each item must be of format &apos;groupId:artifactId&apos;.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of artifacts to include in the classpath. Each item must be of format &apos;groupId:artifactId&apos;.</description>
        </parameter>
        <parameter>
          <name>productJarName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of product jar, e.g. &apos;OpenDJ&apos;.</description>
        </parameter>
        <parameter>
          <name>supportedLocales</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>List of supported locales, separated by a &apos;,&apos;.
Example: &apos;fr,es,de&apos;
</description>
        </parameter>
      </parameters>
    </mojo>
  </mojos>
</plugin>